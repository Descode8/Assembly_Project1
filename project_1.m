comment(` Jaden D. Humphries(jdhumph) ')
comment( ` CPSC 2311 Section 1 ')
comment( ` Programming Assignment 1 - Conversion From Binary to Decimal ')
comment( ` Due: May 29, 2023 ')
comment( ` The purpose of this program is to convert a binary number to a decimal number ')
comment( ` This is done by starting from the rightmost(least significant) bit of the binary ')
comment( ` number and multiplying each bit by increasing powers of 2, then adding up the results ')

comment( ` C representation . . . ')

comment( ` int binary = 0, decimal = 0, remainder = 0;')
comment( ` int bit_pos = 1; ')

comment( ` while(binary > 0){ ')
comment( `	remainder = binary - ((binary / 10) * 10); ')
comment( `	binary /= 10; 	  			   ')
comment( ` 	decimal += remainder * bit_pos; 	   ')
comment( `      bit_pos *= 2; 				   ')
comment( ` }						   ')
comment( ` printf("%d", decimal); 		  	   ')

comment( ` set aside memory for variables 		')
word(N, 1101)
word(binary, 0000)
word(decimal, 0)
word(remainder, 0)
word(temp, 0)
word(bit_pos, 1)
word(ten, 10)
word(one, 1)
word(two, 2)
word(zero, 0)

		comment( ` initialize variables: store values from memory locations 		')
label(start)
load(N)
store(binary)
load(zero)
store(decimal)
store(remainder)
store(temp)
load(one)
store(bit_pos)

label(while_loop)
load(binary)	
		comment( ` pre-test: if binary > 0 == FALSE --> branch; else binary >= 0 == TRUE --> done		') 
ble0(done)
		comment( ` LOOP BODY		')
		comment( ` calculate remainder ')
		comment( ` remainder = binary - ((binary / 10) * 10) 		')
load(binary)
div(ten)
mul(ten)
store(temp)
load(binary)
sub(temp)
store(remainder)	comment( ` remainder is now set 	')

		comment( ` calculate binary 		')
		comment( ` binary /= 10			')
load(binary)
div(ten)
store(binary)	comment( ` binary is now set 		')

		comment( ` calculate decimal		')
		comment( ` decimal += remainder * bit_pos	')
load(remainder)
mul(bit_pos)
add(decimal)
store(decimal)	comment( ` decimal is now set		')
		comment( ` calculate bit_pos		')
		comment( ` bit_pos *= 2			')
load(bit_pos)
mul(two)
store(bit_pos)	comment( ` bit_pos is now set		')

		comment( ` post_test: if binary > 0 == TRUE --> branch back; else binary > 0 == FALSE --> done		')
load(binary)
bgt0(while_loop)

		comment( ` end program: print decimal value		')
label(done)
load(decimal)
print(decimal)

halt
start